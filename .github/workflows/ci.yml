name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Ubuntu versions
          - os: ubuntu-latest
            compiler: gcc
          - os: ubuntu-latest
            compiler: clang
          - os: ubuntu-22.04
            compiler: gcc
    
    name: Test on ${{ matrix.os }} with ${{ matrix.compiler }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential autotools-dev autoconf automake libtool pkg-config
    
    - name: Configure
      run: |
        autoreconf -fiv
        # Ensure config.sub and config.guess exist
        if [ ! -f config.sub ]; then
          automake --add-missing --copy 2>/dev/null || true
        fi
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          export CC=clang
        else
          export CC=gcc
        fi
        # Don't use -Werror during configure as it breaks feature detection
        CFLAGS="-Wall -Wextra -D_FORTIFY_SOURCE=2 -D_GNU_SOURCE -fstack-protector-strong -O2" \
        LDFLAGS="-Wl,-z,relro -Wl,-z,now" \
        ./configure
    
    - name: Build
      run: |
        # Add -Werror for the actual build
        export CFLAGS="-Wall -Wextra -Werror -D_FORTIFY_SOURCE=2 -D_GNU_SOURCE -fstack-protector-strong -O2"
        make
    
    - name: Run tests
      run: make test
    
    - name: Display test failures
      if: failure()
      run: |
        echo "Test failures detected. Displaying error details:"
        echo "================================================"
        if [ -d test ]; then
          cd test
          for diff_file in *.diff; do
            if [ -f "$diff_file" ]; then
              echo "--- Failure in $diff_file ---"
              cat "$diff_file"
              echo ""
            fi
          done
          if [ -f conserver.log ]; then
            echo "--- Conserver log ---"
            tail -50 conserver.log
          fi
        fi
        echo "================================================"
    
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test/*.diff
          test/conserver.log
        if-no-files-found: ignore
  static-analysis:
    runs-on: ubuntu-latest
    # Run in parallel with tests for faster feedback
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install static analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang clang-tools build-essential autotools-dev autoconf automake libtool
    
    - name: Configure project
      run: |
        autoreconf -fiv
        # Ensure config.sub and config.guess exist
        if [ ! -f config.sub ]; then
          automake --add-missing --copy 2>/dev/null || true
        fi
        ./configure
    
    - name: Run Clang Static Analyzer
      run: |
        echo "Running Clang Static Analyzer..."
        echo "================================"
        CLANG_VERSION=$(ls /usr/bin/clang-* | grep -E 'clang-[0-9]+$' | sed 's/.*clang-//' | head -1)
        
        scan-build --use-analyzer=/usr/bin/clang-${CLANG_VERSION} --status-bugs \
          -o /tmp/clang-analysis --html-title="Static Analysis Results" \
          --exclude /usr/include \
          make clean && make
        echo "================================"
        echo "Clang Static Analyzer complete"
        if [ -d "/tmp/clang-analysis" ] && find /tmp/clang-analysis -name '*.html' | grep -q .; then
          echo "::error::Static analysis found issues"
          find /tmp/clang-analysis -name "index.html" -exec dirname {} \; | head -1 | xargs -I {} echo "Report directory: {}"
          exit 1
        fi
    
    - name: Run cppcheck
      run: |
        echo "Running cppcheck static analysis..."
        echo "================================"
        cppcheck --enable=all --std=c99 --suppress=missingIncludeSystem --force \
          --error-exitcode=1 \
          conserver/ console/ autologin/ contrib/chat/
        echo "================================"
        echo "Cppcheck analysis complete"

  test-rhel-derivatives:
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          # AlmaLinux (RHEL derivative)
          - container: almalinux:9
            name: AlmaLinux 9
          - container: almalinux:8
            name: AlmaLinux 8
          # Fedora (upstream of RHEL)
          - container: fedora:41
            name: Fedora 41
          - container: fedora:40
            name: Fedora 40
    
    name: Test on ${{ matrix.name }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        if [[ "${{ matrix.container }}" == almalinux:* ]]; then
          dnf install -y gcc make autoconf automake libtool diffutils findutils
        elif [[ "${{ matrix.container }}" == fedora:* ]]; then
          # Fedora minimal containers need more packages
          dnf install -y gcc make autoconf automake libtool diffutils findutils glibc-devel
        fi
    
    - name: Configure
      run: |
        autoreconf -fiv
        # Ensure config.sub and config.guess exist
        if [ ! -f config.sub ]; then
          automake --add-missing --copy 2>/dev/null || true
        fi
        # Don't use -Werror during configure as it breaks feature detection
        CFLAGS="-Wall -Wextra -D_FORTIFY_SOURCE=2 -D_GNU_SOURCE -fstack-protector-strong -O2" \
        LDFLAGS="-Wl,-z,relro -Wl,-z,now" \
        ./configure
    
    - name: Build
      run: |
        # Add -Werror for the actual build
        export CFLAGS="-Wall -Wextra -Werror -D_FORTIFY_SOURCE=2 -D_GNU_SOURCE -fstack-protector-strong -O2"
        make
    
    - name: Run tests
      run: make test
    
    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}-test-results
        path: |
          test/*.diff
          test/conserver.log
        if-no-files-found: ignore

  test-freebsd:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - version: '13.4'
            config: 'basic'
          - version: '13.4'
            config: 'uds'
          - version: '14.2'
            config: 'basic'
          - version: '14.2'
            config: 'uds'
    
    name: Test FreeBSD ${{ matrix.version }} (${{ matrix.config }})
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Test on FreeBSD ${{ matrix.version }} with ${{ matrix.config }} config
      uses: vmactions/freebsd-vm@v1
      with:
        release: ${{ matrix.version }}
        usesh: true
        prepare: |
          pkg install -y autoconf automake libtool gmake
        run: |
          autoreconf -fiv
          # Ensure config.sub and config.guess exist
          if [ ! -f config.sub ]; then
            automake --add-missing --copy 2>/dev/null || true
          fi
          # Configure based on test type
          if [ "${{ matrix.config }}" = "uds" ]; then
            CFLAGS="-Wall -Wextra -D_GNU_SOURCE -O2" ./configure --with-uds
          else
            CFLAGS="-Wall -Wextra -D_GNU_SOURCE -O2" ./configure
          fi
          # Add -Werror for the actual build
          CFLAGS="-Wall -Wextra -Werror -D_GNU_SOURCE -O2" gmake
          gmake test

  sanitizer-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sanitizer: [address, undefined]
    
    name: Test with ${{ matrix.sanitizer }} sanitizer
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential autotools-dev autoconf automake libtool pkg-config
    
    - name: Configure with ${{ matrix.sanitizer }} sanitizer
      run: |
        autoreconf -fiv
        # Ensure config.sub and config.guess exist
        if [ ! -f config.sub ]; then
          automake --add-missing --copy 2>/dev/null || true
        fi
        if [ "${{ matrix.sanitizer }}" = "address" ]; then
          export CFLAGS="-fsanitize=address -fno-omit-frame-pointer -g -D_GNU_SOURCE"
          export LDFLAGS="-fsanitize=address"
        elif [ "${{ matrix.sanitizer }}" = "undefined" ]; then
          export CFLAGS="-fsanitize=undefined -fno-omit-frame-pointer -g -D_GNU_SOURCE"
          export LDFLAGS="-fsanitize=undefined"
        fi
        ./configure
    
    - name: Build with sanitizer
      run: make
    
    - name: Run tests with sanitizer
      run: |
        if [ "${{ matrix.sanitizer }}" = "address" ]; then
          export ASAN_OPTIONS=detect_leaks=1:check_initialization_order=1:strict_string_checks=1
        elif [ "${{ matrix.sanitizer }}" = "undefined" ]; then
          export UBSAN_OPTIONS=print_stacktrace=1:halt_on_error=1
        fi
        make test
    
    - name: Upload sanitizer logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.sanitizer }}-sanitizer-results
        path: |
          test/*.diff
          test/conserver.log
        if-no-files-found: ignore
